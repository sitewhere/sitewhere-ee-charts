apiVersion: templates.sitewhere.io/v1alpha3
kind: TenantEngineDatasetTemplate
metadata:
  name: {{ include "smart-city-template.fullname" . }}-event-model
  labels:
      sitewhere.io/functional-area: event-management
spec:
  configuration: |
    let System = Java.type('java.lang.System');
        let JavaLong = Java.type('java.lang.Long');
        let JavaMath = Java.type('java.lang.Math');
        let JavaDate = Java.type('java.util.Date');
        let ArrayList = Java.type('java.util.ArrayList');
        let UUID = Java.type('java.util.UUID');
        let GeoUtils = Java.type('com.sitewhere.microservice.api.event.GeoUtils');
        let Polygon = Java.type('com.vividsolutions.jts.geom.Polygon');
        let GeometryFactory = Java.type('com.vividsolutions.jts.geom.GeometryFactory');
        let MinimumBoundingCircle = Java.type('com.vividsolutions.jts.algorithm.MinimumBoundingCircle');
        let AffineTransformation = Java.type('com.vividsolutions.jts.geom.util.AffineTransformation');
        let Coordinate = Java.type('com.vividsolutions.jts.geom.Coordinate');

        // ########### //
        // Common Code //
        // ########### //
        let mxPerAssignment = 20
        let locationsPerAssignment = 1
        let minTemp = 10
        let warnTemp = 25
        let errorTemp = 1
        let criticalTemp = 5
        let maxTemp = 100

        function randomId() {
          UUID.randomUUID().toString()
        }

        function randomItem(items) {
          return items[Math.floor(Math.random() * items.length)];
        }

        // Get Java data for ms offset.
        function dateFor(ms) {
          let longVal = JavaLong.parseLong(`${ms}`);
          return new JavaDate(longVal);
        }

        // #################### //
        // Create Device Events //
        // #################### //

        // Function for creating measurement and alert events.
        function createMeasurements(assn, start) {
                let current = Math.floor(start.getTime() - (Math.random() * 60000.0));
                let fuel = 20
                let measure = 0

                let mxRequests = []
                let alertRequests = []

                let mxCount = 0
                let alertCount = 0
                for (var i = 0; i < mxPerAssignment; i++) {

                  // Simulate battery changes. battery
                  fuel -= (Math.random() * 2);
                  fuel = Math.round(fuel * 100.0) / 100.0;
                  if (fuel < 0) {
                    fuel = 0;
                  }

                  if (fuel < 18) {
                     measure = 1;
                  } else {
                     measure = 0;
                  }
                  let spotMeasure = eventBuilder.newMeasurements().measurement('measure', measure).on(dateFor(current)).trackState();
                  mxRequests.push(spotMeasure);
                  mxCount++;
                  current -= Math.floor(Math.random() * 15000.0);

                  let fuellevel = eventBuilder.newMeasurements().measurement('battery.level', fuel).on(dateFor(current)).trackState();
                  mxRequests.push(fuellevel);
                  mxCount++;

                  if (minTemp > fuel ) {
                    let alert = eventBuilder.newAlert('battery.low', 'Battery level is low.').on(dateFor(current)).warning().trackState();

                    if (criticalTemp > fuel) {
                      alert = eventBuilder.newAlert('battery.critical', 'Device shut down due to critical battery level of ' + fuel + ' %').on(dateFor(current)).critical().trackState();
                    }
                    alertRequests.push(alert);
                    alertCount++;
                  }
                  current -= Math.floor(Math.random() * 30000.0);
                }

                eventBuilder.forAssignment(assn.getToken()).persistMeasurements(mxRequests);
                let alerts = eventBuilder.forAssignment(assn.getToken()).persistAlerts(alertRequests);

                // Create alarms for critical alerts.
                for (var ialert = 0; ialert < alerts.size(); ialert++) {
                  let alert = alerts.get(ialert);
                  if (alert.getLevel().name() == 'Critical') {
                    let alarm = deviceBuilder.newDeviceAlarm(assn.getToken(), alert.getMessage());
                    alarm.withTriggeringEventId(alert.getId());
                    deviceBuilder.persist(alarm);
                  }
                }

                logger.info(`[Create Events] ${mxCount} measurements. ${alertCount} alerts.`)
              }


      // Closure for creating location events. , zone
        function createLocations(assn, startDate) {
          let current = Math.floor(startDate.getTime() - (Math.random() * 60000.0));
         // let bounds = map.fitBounds([[33.771282,-84.390455], [33.762201,-84.382125] , [33.762567,-84.382160]]);
          //let polyZone = GeoUtils.createPolygonForLocations(bounds);//zone.getBounds()
          //let centroid = polyZone.getCentroid();

          // Calculate length of steps between locations based on bounding circle.
         // let circle = new MinimumBoundingCircle(polyZone);
          let step = 20 / 10;// circle.getRadius()

          let cx =  33.762237;//centroid.getX();
          let cy = -84.382835; //centroid.getY();
          let deltaX = (Math.sqrt(Math.random()) * step * 2) - step;
          let deltaY = (Math.sqrt(Math.random()) * step * 2) - step;

          // Used to rotate deltas to turn path and stay inside polygon.
          let xform = new AffineTransformation();
          xform.rotate(JavaMath.toRadians(22.5));

          let locationRequests = []

          let locCount = 0
          let factory = new GeometryFactory();
          for (var i = 0; i < locationsPerAssignment; i++) {
            let foundNext = false;

            // Add a little randomness to path.
            let waver = ((Math.random() * 20) - 10.0);
            let waverXform = new AffineTransformation();
            waverXform.rotate(JavaMath.toRadians(waver));
            let waverDelta = new Coordinate(deltaX, deltaY);
            waverXform.transform(waverDelta, waverDelta);
            deltaX = waverDelta.x;
            deltaY = waverDelta.y;

            while (!foundNext) {
              let start = new Coordinate(cx, cy);
              let end = new Coordinate(cx + deltaX, cy + deltaY);
              let lineCoords = new ArrayList();
              lineCoords.add(start);
              lineCoords.add(end);
              let line = factory.createLineString(lineCoords);
              if (polyZone.contains(line)) {
                let newloc = eventBuilder.newLocation(end.y, end.x).on(dateFor(current)).trackState();
                locationRequests.push(newloc);

                cx = cx + deltaX;
                cy = cy + deltaY;
                foundNext = true;
              } else {
                // Rotate deltas and try again.
                let delta = new Coordinate(deltaX, deltaY);
                xform.transform(delta, delta);
                deltaX = delta.x;
                deltaY = delta.y;
              }
            }
            locCount++;
            current += Math.floor(Math.random() * 30000.0);
          }
          eventBuilder.forAssignment(assn.getToken()).persistLocations(locationRequests);
          logger.info(`[Create Events] ${locCount} locations.`);
        }

        // ------------------------------ //
        // Create Location Events for an Assignment  //
        // ------------------------------ //
        function createLocation(assn, startDate) {
        let current = Math.floor(startDate.getTime() - (Math.random() * 60000.0));

        let step = 0.005 / 10;// circle.getRadius()

        let cx = -84.393380; //centroid.getX();
        let cy =  33.758007; //centroid.getY();
        let deltaX = (Math.sqrt(Math.random()) * step * 20) - step;
        let deltaY = (Math.sqrt(Math.random()) * step * 20) - step;

        // Used to rotate deltas to turn path and stay inside polygon.
        let xform = new AffineTransformation();
        xform.rotate(JavaMath.toRadians(2.5));

        let locationRequests = []

        let locCount = 0
        let factory = new GeometryFactory();
        for (var i = 0; i < locationsPerAssignment; i++) {
        let foundNext = false;

        // Add a little randomness to path.
        let waver = ((Math.random() * 2) - 0.00001);
        let waverXform = new AffineTransformation();
        waverXform.rotate(JavaMath.toRadians(waver));
        let waverDelta = new Coordinate(deltaX, deltaY);
        waverXform.transform(waverDelta, waverDelta);
        deltaX = waverDelta.x;
        deltaY = waverDelta.y;

        while (!foundNext) {
        let start = new Coordinate(cx, cy);
        let end = new Coordinate(cx + deltaX, cy + deltaY);
        let lineCoords = new ArrayList();
        lineCoords.add(start);
        lineCoords.add(end);


        let newloc = eventBuilder.newLocation(end.y, end.x).on(dateFor(current)).trackState();
        locationRequests.push(newloc);

        cx = cx + deltaX;
        cy = cy + deltaY;
        foundNext = true;

        }
        locCount++;
        current += Math.floor(Math.random() * 30000.0);
        }
        eventBuilder.forAssignment(assn.getToken()).persistLocations(locationRequests);
        logger.info(`[Create Events] ${locCount} locations.`);
        }


       // Data structure for assignment location.
        function assnLocation(name, latitude, longitude) {
          return {'name': name, 'latitude': latitude, 'longitude': longitude};
         }


        // Closure for creating location events.
            function createLocationParking(assn, assetToken, startDate) {
               let current = Math.floor(startDate.getTime() - (Math.random() * 60000.0));
               let locCount = 0
               let locations = [];
               let locationRequests = []
               locations.push(assnLocation(0, 33.757272, -84.391076)); //' 342349343-SERIAL-NUMBER-USPOT'
               locations.push(assnLocation(1, 33.756759, -84.391203)); //'734539339-SERIAL-NUMBER-PLS'
               locations.push(assnLocation(2, 33.756672,-84.391106)); //'623947324-SERIAL-NUMBER-FLASHMOUNT'
               locations.push(assnLocation(3, 33.755831,-84.390458)); //'193835744-SERIAL-NUMBER-SURFACE'
               locations.push(assnLocation(4, 33.755831,-84.390458)); //'442349340-SERIAL-NUMBER-USPOT'
               locations.push(assnLocation(5, 33.766614,-84.375546)); //'392455494-SERIAL-NUMBER-PLS'
               locations.push(assnLocation(6, 33.766665,-84.375579)); //'398434398-SERIAL-NUMBER-PLS'
               locations.push(assnLocation(7, 33.752647,-84.388637)); //'193835745-SERIAL-NUMBER-SURFACE'
               locations.push(assnLocation(8, 33.752691,-84.388701)); //'193835746-SERIAL-NUMBER-SURFACE'
               locations.push(assnLocation(9, 33.752735,-84.388765)); //'193835747-SERIAL-NUMBER-SURFACE'
               locations.push(assnLocation(10, 33.751273,-84.393525)); //'623947325-SERIAL-NUMBER-FLASHMOUNT'
               locations.push(assnLocation(11, 33.751251,-84.393475)); //'623947326-SERIAL-NUMBER-FLASHMOUNT'
               locations.push(assnLocation(12, 33.751180,-84.393355)); //'623947327-SERIAL-NUMBER-FLASHMOUNT'

               let location = locations[assetToken];
               let newloc = eventBuilder.newLocation(location.latitude, location.longitude).on(dateFor(current)).trackState();
               locationRequests.push(newloc);
               current += Math.floor(Math.random() * 30000.0);
               locCount++;

               eventBuilder.forAssignment(assn.getToken()).persistLocations(locationRequests);
               logger.info(`[Create Events] ${locCount}  locations.`);
           }


        // ------------------------------ //
        // Create Events for Assignments  //
        // ------------------------------ //

        let start = dateFor(System.currentTimeMillis() - (2 * 60 * 60 * 1000));
        let allActiveAssn = deviceBuilder.allActiveAssignments();
        for (var iassn = 0; iassn < allActiveAssn.size(); iassn++) {
          let assn = allActiveAssn.get(iassn);
          createMeasurements(assn, start);
          createLocationParking(assn, iassn, start);
        }
